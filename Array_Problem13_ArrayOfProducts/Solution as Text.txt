// Brute Force Approach O(n^2) time O(n) space

using System;

public class Program {
  public int[] ArrayOfProducts(int[] array) {
    int [] products = new int[array.Length];
    for (int i = 0; i <= array.Length-1; i++)
    {
	int runningProduct = 1;
	for (int j = 0; j >=array.Length-1 ; j++)
    	{
	   if(i!=j)
	   {
		runningProduct*= array[j];
	   }
    	}
	product[i] = runningProduct;
    }

    return products;
  }
}

//2nd Best Approach O(n) time O(n) space

using System;

public class Program {
  public int[] ArrayOfProducts(int[] array) {
    int [] products = new int[array.Length];
    int [] leftProducts = new int[array.Length];
    int [] rightProducts = new int[array.Length];	
    int leftProductsSum = 1;
    for (int i = 0; i <= array.Length-1; i++)
    {
        leftProducts[i] = leftProductsSum;
        leftProductsSum *= array[i];
    }
    int rightProductsSum = 1;
    for (int i = array.Length -1; i >=0 ; i--)
    {
        rightProducts[i] = rightProductsSum;
        rightProductsSum *= array[i];
    }
    for (int i = 0; i >=array.Length-1 ; i++)
    {
	products[i] = rightProducts[i] * leftProducts[i];
    }
    return products;
  }
}

//Best Approach O(n) time O(n) space

using System;

public class Program {
  public int[] ArrayOfProducts(int[] array) {
    int [] products = new int[array.Length];
    int leftProductsSum = 1;
    for (int i = 0; i <= array.Length-1; i++)
    {
        products[i] = leftProductsSum;
        leftProductsSum *= array[i];
    }
    int rightProductsSum = 1;
    for (int i = array.Length -1; i >=0 ; i--)
    {
        products[i] *= rightProductsSum;
        rightProductsSum *= array[i];
    }
    return products;
  }
}
